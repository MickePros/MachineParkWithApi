@inject GlobalMachineList GlobalMachineList
@inject HttpClient Http

<h3>MachineList</h3>
<EditForm Model="@newMachine">
    <DataAnnotationsValidator />

    <div>
        <label for="location">Location</label>
        <InputText id="location" @bind-Value="newMachine.Location" />
        <ValidationMessage For="@(() => newMachine.Location)" />
    </div>

    <button @onclick="() => AddMachine()">Add Machine</button>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Location</th>
            <th>Edited</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var machine in machines)
        {
            <tr>
                <td>@machine.Name</td>
                <td>@machine.Location</td>
                <td>@machine.Edited</td>
                <td>
                    @if (machine.Status)
                    {
                        <span class="alert-success p-2 rounded">Online</span>
                    }
                    else
                    {
                        <span class="alert-danger p-2 rounded">Offline</span>
                    }
                </td>
                <td>
                    <button @onclick="() => StatusToggle(machine)">S</button>
                    <button @onclick="() => UpdateEdit(machine)">E</button>
                    <button @onclick="() => RemoveMachine(machine)">R</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private MachineDto newMachine = new MachineDto();
    private List<MachineDto> machines => GlobalMachineList.machines;

    private async Task AddMachine(){
        Guid guid = Guid.NewGuid();
        string guidString = guid.ToString("N");
        string formattedGuid = $"{guidString.Substring(0, 4)}-{guidString.Substring(4, 4)}-{guidString.Substring(8, 4)}";

        newMachine.Name = formattedGuid;
        newMachine.Edited = DateTime.Now;
        newMachine.Status = false;

        var response = await Http.PostAsJsonAsync("api/Machines", newMachine);
        if (response.IsSuccessStatusCode)
        {
            GlobalMachineList.Add(newMachine);
            newMachine = new MachineDto();
        }
    }

    private void RemoveMachine(MachineDto machine){
        GlobalMachineList.machines.Remove(machine);
    }

    private void UpdateEdit(MachineDto machine){
        machine.Edited = DateTime.Now;
    }

    private void StatusToggle(MachineDto machine){
        machine.Status = !machine.Status;
    }

    protected override async Task OnInitializedAsync()
    {
        if (GlobalMachineList.machines.Count < 1)
        {
            List<MachineDto> machines = await Http.GetFromJsonAsync<List<MachineDto>>("api/Machines");
            foreach (MachineDto machine in machines){
                GlobalMachineList.Add(machine);
            }
        }
        GlobalMachineList.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        GlobalMachineList.OnChange -= StateHasChanged;
    }
}